# -*- coding: utf-8 -*-
"""preprocess_training.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1GkeI0tVI81cO2O5vRa8za7Tgr_cIv18J
"""

import os
import numpy as np
import librosa
from librosa.filters import mel as librosa_mel_fn

import torch
import torch.nn as nn
import torch.nn.functional as F

import glob
from tqdm import tqdm
import random
from torch.utils.data.dataset import Dataset
import pickle

n_fft = 1024
hop_length = 256
win_length = 1024
sampling_rate = 22050
n_mel_channels = 80
mel_fmin = 0.0
mel_fmax = None

# Code from: https://github.com/descriptinc/melgan-neurips

def normalize_mel(wavspath):
    wav_files = glob.glob(os.path.join(
        wavspath, '**', '*.wav'), recursive=True)  # source_path
    vocoder = torch.hub.load('descriptinc/melgan-neurips', 'load_melgan')

    mel_list = list()
    for wavpath in tqdm(wav_files, desc='Preprocess wav to mel'):
        wav_orig, _ = librosa.load(wavpath, sr=sampling_rate, mono=True)
        spec = vocoder(torch.tensor([wav_orig]))
        mel_list.append(spec.cpu().detach().numpy()[0])

    mel_concatenated = np.concatenate(mel_list, axis=1)
    mel_mean = np.mean(mel_concatenated, axis=1, keepdims=True)
    mel_std = np.std(mel_concatenated, axis=1, keepdims=True) + 1e-9

    mel_normalized = list()
    for mel in mel_list:
        assert mel.shape[-1] >= 64, f"Mel spectogram length must be greater than 64 frames, but was {mel.shape[-1]}"
        app = (mel - mel_mean) / mel_std
        mel_normalized.append(app)

    return mel_normalized, mel_mean, mel_std


def save_pickle(variable, fileName):
    with open(fileName, 'wb') as f:
        pickle.dump(variable, f)


def load_pickle_file(fileName):
    with open(fileName, 'rb') as f:
        return pickle.load(f)

def buildTrainset(source_path, target_path, cache_folder='./cache/'):

    print('Building training dataset...')

    mel_normalized_A, mel_mean_A, mel_std_A = normalize_mel(source_path)
    mel_normalized_B, mel_mean_B, mel_std_B = normalize_mel(target_path)

    if not os.path.exists(cache_folder):
        os.makedirs(cache_folder)

    np.savez(os.path.join(cache_folder, 'norm_stat_A.npz'),
            mean=mel_mean_A,
            std=mel_std_A)
    
    np.savez(os.path.join(cache_folder, 'norm_stat_B.npz'),
            mean=mel_mean_B,
            std=mel_std_B)

    save_pickle(variable=mel_normalized_A,
                fileName=os.path.join(cache_folder, "dataset_A_normalized.pickle"))

    save_pickle(variable=mel_normalized_B,
                fileName=os.path.join(cache_folder, "dataset_B_normalized.pickle"))

    print('training dataset constructed and saved!')


if __name__ == '__main__':
    source_path = '/home/sofianzalouk/vcc2018/vcc2018_training/VCC2SM3'
    target_path = '/home/sofianzalouk/vcc2018/vcc2018_training/VCC2TF1'
    cache_folder = '/home/sofianzalouk/vcc_2018_melspec/'

    buildTrainset(source_path=source_path,
                  target_path=target_path, cache_folder=cache_folder)
# -*- coding: utf-8 -*-
"""preprocess_training.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1GkeI0tVI81cO2O5vRa8za7Tgr_cIv18J
"""

import os
import numpy as np
import librosa
from librosa.filters import mel as librosa_mel_fn

import torch
import torch.nn as nn
import torch.nn.functional as F

import glob
from tqdm import tqdm
import random
from torch.utils.data.dataset import Dataset
import pickle
import argparse
import pandas as pd

n_fft = 1024
hop_length = 256
win_length = 1024
sampling_rate = 22050
n_mel_channels = 80
mel_fmin = 0.0
mel_fmax = None

def normalize_mel(wav_files):
    vocoder = torch.hub.load('descriptinc/melgan-neurips', 'load_melgan')

    mel_list = list()
    for wavpath in tqdm(wav_files, desc='Preprocess wav to mel'):
        wav_orig, _ = librosa.load(wavpath, sr=sampling_rate, mono=True)
        spec = vocoder(torch.tensor([wav_orig]))
        mel_list.append(spec.cpu().detach().numpy()[0])

    mel_concatenated = np.concatenate(mel_list, axis=1)
    mel_mean = np.mean(mel_concatenated, axis=1, keepdims=True)
    mel_std = np.std(mel_concatenated, axis=1, keepdims=True) + 1e-9

    mel_normalized = list()
    for mel in mel_list:
        assert mel.shape[-1] >= 64, f"Mel spectogram length must be greater than 64 frames, but was {mel.shape[-1]}"
        app = (mel - mel_mean) / mel_std
        mel_normalized.append(app)

    return mel_normalized, mel_mean, mel_std


def save_pickle(variable, fileName):
    with open(fileName, 'wb') as f:
        pickle.dump(variable, f)


def load_pickle_file(fileName):
    with open(fileName, 'rb') as f:
        return pickle.load(f)

def read_manifest(data_dir, split=None, dataset=None, speaker_id=None):
    # Load manifest file which defines dataset
    manifest_path = os.path.join('./manifests', f'{dataset}_manifest.csv')
    df = pd.read_csv(manifest_path, sep=',')

    # Filter by speaker_id
    df['speaker_id'] = df['speaker_id'].astype(str)
    df = df[df['speaker_id'] == speaker_id]
    wav_files = df['wav_file'].tolist()

    # Contruct wav paths
    wav_paths = [os.path.join(data_dir, wav_files[i]) for i in range(len(wav_files))]

    return wav_paths

def args_to_list(csv, arg_type=str):
    """Convert comma-separated arguments to a list."""
    arg_vals = [arg_type(d) for d in str(csv).split(',')]
    return arg_vals

def buildTrainset(source_ids, target_ids, cache_folder='./cache/'):
    data_dir = '/home/data/'
    source_ids = args_to_list(source_ids)
    target_ids = args_to_list(target_ids)

    if not os.path.exists(cache_folder):
        os.makedirs(cache_folder)

    source_cache_folder = os.path.join(cache_folder, 'voc')
    if not os.path.exists(source_cache_folder):
        os.makedirs(source_cache_folder)

    for source_id in source_ids:
        voc_wav_paths = read_manifest(data_dir, dataset="voc", speaker_id=source_id)
        print(f'Building training dataset for {source_id}...')
        print(f'Found {len(voc_wav_paths)} wav files')
        mel_normalized_A, mel_mean_A, mel_std_A = normalize_mel(voc_wav_paths)

        save_dir = os.path.join(source_cache_folder, source_id)
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)

        np.savez(os.path.join(save_dir, 'norm_stat_voc.npz'),
            mean=mel_mean_A,
            std=mel_std_A)
        
        save_pickle(variable=mel_normalized_A,
                fileName=os.path.join(save_dir, "voc_normalized.pickle"))
    
    target_cache_folder = os.path.join(cache_folder, 'coraal')
    if not os.path.exists(target_cache_folder):
        os.makedirs(target_cache_folder)
    for target_id in target_ids:
        coraal_wav_paths = read_manifest(data_dir, dataset="coraal", speaker_id=target_id)
        print(f'Building training dataset for {target_id}...')
        print(f'Found {len(coraal_wav_paths)} wav files')
        mel_normalized_B, mel_mean_B, mel_std_B = normalize_mel(coraal_wav_paths)

        save_dir = os.path.join(target_cache_folder, target_id)
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)

        np.savez(os.path.join(save_dir, 'norm_stat_coraal.npz'),
            mean=mel_mean_B,
            std=mel_std_B)
        
        save_pickle(variable=mel_normalized_B,
                fileName=os.path.join(save_dir, "coraal_normalized.pickle"))

    print('training dataset constructed and saved!')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=' ')

    parser.add_argument('--source_ids', type=str, default=None,
                        help='Comma-separated list of source speaker (VOC) IDs.')
    parser.add_argument('--target_ids', type=str, default=None,
                        help='Comma-separated list of target speaker (CORAAL) IDs.')
    parser.add_argument('--cache_folder', type=str, default='/home/data/vc3_melspec_dataset',
                        help='Directory to save outputs.')
    args = parser.parse_args()

    buildTrainset(**vars(args))
